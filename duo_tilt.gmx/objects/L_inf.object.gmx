<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char_L</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.x = room_width / 4;
self.y = room_height - 200;
iamon = true;
//xtilt
neutraltilt = 0.15;
stoptilt = 0.15
//ytilt
neutraltiltup = 0.9;
neutraltiltdown = 0.5;
stoptiltup = 0.85
stoptiltdown = 0.6
verticaloffset = 100;
modi = 0;

//alarm[0] = 5 * room_speed;

global.lefton = true;
global.jumpcounter = 0;
global.jumpleft = false;
global.fall = false;

//skins
if global.skins == "debug" {
    myskins[1] = spr_char_L;
    myskins[2] = spr_char_L;
    myskins[3] = spr_char_L;
    myskins[4] = spr_char_off;
    image_xscale = 14;
    image_yscale = 14;
} else if global.skins == "minimal" {
    myskins[1] = red_l;
    myskins[2] = red_m;
    myskins[3] = red_r;
    myskins[4] = min_off;
    image_xscale = 14/3;
    image_yscale = 14/3;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lefton = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Randomly activate or deactivate side
myrand = round(random_range(0,1));
if myrand == 0 {
    global.lefton = true;
    sprite_index = spr_char_L;
}
if myrand == 1 {
    global.lefton = false;
}

alarm[0] = 5* room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Object on
iamon = global.lefton;

//edit y value
//Check tilt modifier

if global.lefton == true{
/*
    if global.tilth &lt; 0.65 {modi = 100;}
    if global.tilth &gt; 0.9 and global.tilth &lt; 1.5{modi = -100;}
    if global.tilth &gt; 0.65 and global.tilth &lt; 0.9 {modi = 0;}
*/
    //modi = modi * 500;
    if global.sides == "normal"{
        self.y = round(-(1/2000) * power(self.x - 480,2) + 940); //+modi
    } else if global.sides == "swapped" {
        self.y = round(-(1/2000) * power(self.x - 1440,2) + 940);
    }
} else {
    sprite_index = myskins[4];
    if global.sides == "normal"{
        self.y = round(-(1/2000) * power(self.x - 480,2) + 940); //+modi
    } else if global.sides == "swapped" {
        self.y = round(-(1/2000) * power(self.x - 1440,2) + 940);
    }
    if !alarm[1] {
        alarm[1] = 2.5 * room_speed
        for (i = 0; i &lt; 5; i++){instance_create(x+random_range(-20,20),y-(sprite_height/2),obj_pain);}
        audio_play_sound(snd_hurt,10,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//State check
if global.lefton == true {
    //sprite_index = spr_char_L;
}
if global.lefton == false {
    hspeed = 0;
    sprite_index = myskins[2];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check positioning
if global.sides == "normal" {
    if (self.x &gt; room_width/2 or self.x &lt; 2 ){
        hspeed = 0;
    }
} else if global.sides == "swapped"{
    if (self.x &lt; (room_width / 2) + 2 or self.x &gt; room_width ){
        hspeed = 0;
    }
}


if true{
    if global.jumpleft == true{
        global.jumpleft = false;
        //Do the jump
        //motion_set(random(360), 1 + random(3));
    }
    //Tilt x
    if global.sides == "normal" {
        if (global.tilt &gt; neutraltilt and self.x &lt; room_width/2 + 2){
            //Move right
            hspeed = global.movespeed;
            sprite_index = myskins[3];
        }
        if (global.tilt &lt; -neutraltilt and self.x &gt; -2){
            //Move left
            hspeed = -global.movespeed;
            sprite_index = myskins[1];
        }
        if (global.tilt &lt; stoptilt and global.tilt &gt; -stoptilt){
            hspeed = 0;
            sprite_index = myskins[2];
        }
    } else if global.sides == "swapped" {
        if (global.tilt &gt; neutraltilt and self.x &lt; room_width + 2){
            //Move right
            hspeed = global.movespeed;
            sprite_index = myskins[3];
        }
        if (global.tilt &lt; -neutraltilt and self.x &gt; (room_width / 2) -2){
            //Move left
            hspeed = -global.movespeed;
            sprite_index = myskins[1];
        }
        if (global.tilt &lt; stoptilt and global.tilt &gt; -stoptilt){
            hspeed = 0;
            sprite_index = myskins[2];
        }
    }
}

if global.lefton == false {sprite_index = myskins[4];}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
